//This file contains code that handles the actual transfer of the files b/w the peers


var net = require('net'),
fs = require('fs'),
stream = require('stream'),
zlib = require('zlib');
progress = require('progress-stream'),
parseHeader = require('parseIncomingFile.js'),
server = net.createServer(),
events = require('events'),
eventEmitter = new events.EventEmitter();

server.listen(8082,'localhost',function(){

	console.log('A tcp server is listening on port 9090')

});

//The code portion which handles incoming files.
 //for some string related functions
//First we listen for a client to connect to the tcp server.
//after a successful connection, we have the client's socket available to us
//now we listen to tcp stream related events on the socket.
//The main events are 'data', 'end','close', 'timeout','drain','error'

server.on('connection',function(socket){

	console.log('A client with remote address : ' + socket.remoteAddress + ' and port ' + socket.remotePort);

		//we now listen to events on the socket.

		//When there is a data on the stream
		parseHeader(socket,processFile);

	});

var fileTransfer = function(files,dest){ 

	console.log(files);
	console.log(dest);
	var file_index;
	var host_index;

	for(file_index = 0; file_index < files.length ; file_index ++ ){

		for(host_index = 0; host_index < dest.length ; host_index ++){

			function transfer(file_index,host_index){// this is a closure

				var readStream = fs.createReadStream(files[file_index].path);
				var header = files[file_index].name + '\0' + files[file_index].size + '\0' + files[file_index].type;
				var boundary = '\n\n';

				var client = net.connect(8082,dest[host_index].address,function(){

					console.log('client is trying to connect');

				});

				var str = progress({

					length: files[file_index].size,
					time: 100
				});

				client.on('connect',function(){

					console.log(file_index);
					console.log(host_index);
					console.log('successfully connected! to client ' + dest[host_index].address);
					client.write(header);
					client.write(boundary);
					readStream.pipe(str).pipe(zlib.createGzip()).pipe(client);

				});

				str.on('progress',function(progress){

					console.log(progress);
					var overallProgress = Math.floor(progress.percentage)/dest.length;
					//we're only sending the overall progress of each file
					eventEmitter.emit('progress:overall',file[file_index].name,overallProgress);
					if(progress.percentage == 100){
						client.end();
					}

				});
			}

			transfer(file_index,host_index);

		}
	}

};


eventEmitter.on('file:send:request',function(files,dest){

	fileTransfer(files,dest);

});


//Function to process the file

function processFile(error,header,stream){

	var headers = [];

	headers = header.split('\0');

	var str = {

		length : headers[1],
		time : 1000
	}

	console.log(headers);

	var writeStream = fs.createWriteStream(headers[0]);

	stream.pipe(str).pipe(zlib.Gunzip()).pipe(writeStream);

	str.on('progress', function(progress){

		console.log(progress);

		eventEmitter.emit('file:received:progress',progress.percentage);

	});

	stream.on('end',function(){

		stream.end();

	});

}


module.exports = eventEmitter;
